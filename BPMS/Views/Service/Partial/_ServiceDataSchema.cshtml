@model (IEnumerable<ServiceDataSchemaNodeDTO> nodes, DirectionEnum direction)

@if (Model.nodes != null && Model.nodes.Count() > 0)
{
    <ul class="schema" data-direction="@Model.direction">
        @foreach (ServiceDataSchemaNodeDTO node in Model.nodes)
        {
            <li>
                <div class="d-flex justify-content-between">
                    <div>
                        <b>@node.Name</b> <span>@(String.IsNullOrEmpty(node.Alias) ? "" : $"({node.Alias})")</span> <span class="text-code ps-4">@node.Type.ToLabel()</span>
                    </div>
                    <div id="@node.Id" class="pe-1">
                        @if (node.Type == DataTypeEnum.Object)
                        {
                            <span class="badge @(node.Compulsory ? "bg-primary" : "bg-secondary") rounded-pill text-1em me-4">
                                <i class="fas fa-check-circle"></i>
                            </span>
                            <button type="button" class="btn btn-sm p-icon" onclick="CreateNestedAtt(this)"><i class="fas fa-plus"></i></button>
                        }
                        else
                        {
                            <span class="badge @(node.Compulsory ? "bg-primary" : "bg-secondary") rounded-pill text-1em ">
                                <i class="fas fa-check-circle"></i>
                            </span>
                        }
                        <span id="@node.ParentId" class="btn btn-sm p-icon" onclick="EditAttribute(this)" data-data="@node.StaticData"><i class="fas fa-edit"></i></span>
                        <button type="button" class="btn btn-sm p-icon" onclick="RemoveAttribute(this)"><i class="fas fa-times"></i></button>
                    </div>
                </div>
                @if (node.Type == DataTypeEnum.Object)
                {
                    @await Html.PartialAsync("Partial/_ServiceDataSchema", (node.Children, Model.direction))
                }
            </li>
        }
    </ul>
}
