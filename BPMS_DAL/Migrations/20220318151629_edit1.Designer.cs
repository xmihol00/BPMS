// <auto-generated />
using System;
using BPMS_DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BPMS_DAL.Migrations
{
    [DbContext(typeof(BpmsDbContext))]
    [Migration("20220318151629_edit1")]
    partial class edit1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BPMS_DAL.Entities.AgendaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdministratorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdministratorId");

                    b.ToTable("Agendas");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.AgendaRoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AgendaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AgendaId");

                    b.HasIndex("RoleId");

                    b.ToTable("AgendaRoles");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.AttributeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Compulsory")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ConditionDataSchemaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ConditionExclusiveGatewayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ConditionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.HasIndex("ConditionExclusiveGatewayId", "ConditionDataSchemaId");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.AttributeMapEntity", b =>
                {
                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlockId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AttributeId", "BlockId");

                    b.HasIndex("BlockId");

                    b.ToTable("AttributesMaps");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.AuditMessageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SystemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SystemId");

                    b.ToTable("AuditMessages");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.BlockModelDataSchemaEntity", b =>
                {
                    b.Property<Guid>("BlockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DataSchemaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BlockId", "DataSchemaId", "ServiceTaskId");

                    b.HasIndex("DataSchemaId");

                    b.HasIndex("ServiceTaskId");

                    b.ToTable("BlockModelDataSchemaEntity");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.BlockModelEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.Property<Guid>("PoolId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PoolId");

                    b.ToTable("BlockModels");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.BlockWorkflowEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlockModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SolvedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BlockModelId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("BlockWorkflows");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.ConditionDataEntity", b =>
                {
                    b.Property<Guid>("ExclusiveGatewayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DataSchemaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExclusiveGatewayId", "DataSchemaId");

                    b.HasIndex("DataSchemaId");

                    b.ToTable("ConditionData");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.ConnectionRequestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ForeignUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SystemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SystemId");

                    b.ToTable("ConnectionRequests");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.DataSchemaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Array")
                        .HasColumnType("bit");

                    b.Property<bool>("Compulsory")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Direction")
                        .HasColumnType("int");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StaticData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("DataSchemas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec2873d3-4806-40f6-b4a4-a35380ebd838"),
                            Alias = "q",
                            Array = false,
                            Compulsory = true,
                            Direction = 0,
                            Disabled = false,
                            Name = "Město",
                            ServiceId = new Guid("23bdf847-0e87-4eeb-92c3-58513ade014a"),
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("ec2873d3-4806-40f6-b454-b35380ebd838"),
                            Alias = "appid",
                            Array = false,
                            Compulsory = true,
                            Direction = 0,
                            Disabled = false,
                            Name = "Klíč",
                            ServiceId = new Guid("23bdf847-0e87-4eeb-92c3-58513ade014a"),
                            StaticData = "7622a0a6b0f63a523986e6021e727f81",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("ec2873d3-4877-40f6-b4a4-b35380ebd838"),
                            Alias = "lon",
                            Array = false,
                            Compulsory = true,
                            Direction = 0,
                            Disabled = false,
                            Name = "Zeměpisná délka",
                            ServiceId = new Guid("ec2873d3-4806-40f6-b4a4-b35380ebd828"),
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("ec2873d3-4806-40f6-b4a4-b45380ebd838"),
                            Alias = "lat",
                            Array = false,
                            Compulsory = true,
                            Direction = 0,
                            Disabled = false,
                            Name = "Zeměpisná šířka",
                            ServiceId = new Guid("ec2873d3-4806-40f6-b4a4-b35380ebd828"),
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("ec2873d3-4806-40f6-b4a4-b35380ebd838"),
                            Alias = "appid",
                            Array = false,
                            Compulsory = true,
                            Direction = 0,
                            Disabled = false,
                            Name = "Klíč",
                            ServiceId = new Guid("ec2873d3-4806-40f6-b4a4-b35380ebd828"),
                            StaticData = "7622a0a6b0f63a523986e6021e727f81",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("ab2873d3-4806-40f6-b4a4-a35380ebd838"),
                            Alias = "q",
                            Array = false,
                            Compulsory = true,
                            Direction = 0,
                            Disabled = false,
                            Name = "Město",
                            ServiceId = new Guid("23bdf847-0e87-4eeb-92c3-66513ade014a"),
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("ba2873d3-4806-40f6-b454-b35380ebd838"),
                            Alias = "appid",
                            Array = false,
                            Compulsory = true,
                            Direction = 0,
                            Disabled = false,
                            Name = "Klíč",
                            ServiceId = new Guid("23bdf847-0e87-4eeb-92c3-66513ade014a"),
                            StaticData = "7622a0a6b0f63a523986e6021e727f81",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("aab873d3-4806-40f6-b454-b35380ebd838"),
                            Alias = "mode",
                            Array = false,
                            Compulsory = true,
                            Direction = 0,
                            Disabled = false,
                            Name = "Mód",
                            ServiceId = new Guid("23bdf847-0e87-4eeb-92c3-66513ade014a"),
                            StaticData = "xml",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("aab873d3-4806-40f6-b454-b35380eb5566"),
                            Alias = "ico",
                            Array = false,
                            Compulsory = true,
                            Direction = 0,
                            Disabled = false,
                            Name = "IČO",
                            ServiceId = new Guid("23bdf847-0e87-4eeb-92c3-66513ade1234"),
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("aab873d3-4806-40f6-b454-b35380eb6677"),
                            Alias = "obchodni_firma",
                            Array = false,
                            Compulsory = true,
                            Direction = 0,
                            Disabled = false,
                            Name = "Obchodní firma",
                            ServiceId = new Guid("23bdf847-0e87-4eeb-92c3-66513ade4567"),
                            Type = 0
                        });
                });

            modelBuilder.Entity("BPMS_DAL.Entities.DataSchemaMapEntity", b =>
                {
                    b.Property<Guid>("ServiceTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TargetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ServiceTaskId", "SourceId", "TargetId");

                    b.HasIndex("SourceId");

                    b.HasIndex("TargetId");

                    b.ToTable("DataSchemaMaps");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.FilterEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Filter")
                        .HasColumnType("int");

                    b.HasKey("UserId", "Filter");

                    b.ToTable("FilterEntity");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.FlowEntity", b =>
                {
                    b.Property<Guid>("InBlockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OutBlockId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InBlockId", "OutBlockId");

                    b.HasIndex("OutBlockId");

                    b.ToTable("Flows");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.ForeignAttributeMapEntity", b =>
                {
                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ForeignSendEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ForeignAttributeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AttributeId", "ForeignSendEventId");

                    b.HasIndex("AttributeId")
                        .IsUnique();

                    b.HasIndex("ForeignSendEventId");

                    b.ToTable("ForeignAttributeMaps");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.ForeignRecieveEventEntity", b =>
                {
                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SystemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ForeignBlockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ForeignBlockName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SenderId", "SystemId", "ForeignBlockId");

                    b.HasIndex("SystemId");

                    b.ToTable("ForeignRecieveEvents");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.ForeignSendEventEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ForeignBlockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ForeignBlockName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SystemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SystemId");

                    b.ToTable("ForeignSendEvents");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.ModelEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AgendaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SVG")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgendaId");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.NotificationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<Guid>("TargetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.PoolEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StartedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SystemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.HasIndex("SystemId");

                    b.ToTable("Pools");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.ServiceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppSecret")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AuthType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HttpMethod")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Serialization")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = new Guid("23bdf847-0e87-4eeb-92c3-58513ade014a"),
                            AuthType = 0,
                            Description = "Počasí zadávané názvem města. Sereializace odpovědi v JSON.",
                            HttpMethod = 0,
                            Name = "Počasí - město (JSON)",
                            Serialization = 3,
                            Type = 0,
                            URL = "http://api.openweathermap.org/data/2.5/weather"
                        },
                        new
                        {
                            Id = new Guid("ec2873d3-4806-40f6-b4a4-b35380ebd828"),
                            AuthType = 0,
                            Description = "Počasí zadávané názvem zeměpisnou délkou a zeměpisnou šířkou. Sereializace odpovědi v JSON.",
                            HttpMethod = 0,
                            Name = "Počasí - zeměpisná délka a šířka",
                            Serialization = 3,
                            Type = 0,
                            URL = "http://api.openweathermap.org/data/2.5/weather"
                        },
                        new
                        {
                            Id = new Guid("23bdf847-0e87-4eeb-92c3-66513ade014a"),
                            AuthType = 0,
                            Description = "Počasí zadávané názvem města. Sereializace odpovědi v XML.",
                            HttpMethod = 0,
                            Name = "Počasí - město (XML)",
                            Serialization = 3,
                            Type = 0,
                            URL = "http://api.openweathermap.org/data/2.5/weather"
                        },
                        new
                        {
                            Id = new Guid("23bdf847-0e87-4eeb-92c3-66513ade1234"),
                            AuthType = 0,
                            Description = "Administrativní registr ekonomických subjektů - XML API. Vyhledávání pomocí IČO.",
                            HttpMethod = 0,
                            Name = "ARES - IČO",
                            Serialization = 3,
                            Type = 0,
                            URL = "http://wwwinfo.mfcr.cz/cgi-bin/ares/darv_std.cgi"
                        },
                        new
                        {
                            Id = new Guid("23bdf847-0e87-4eeb-92c3-66513ade4567"),
                            AuthType = 0,
                            Description = "Administrativní registr ekonomických subjektů - XML API. Vyhledávání pomocí názvu obchodní firmy.",
                            HttpMethod = 0,
                            Name = "ARES - Obchodní firma",
                            Serialization = 3,
                            Type = 0,
                            URL = "http://wwwinfo.mfcr.cz/cgi-bin/ares/darv_std.cgi"
                        });
                });

            modelBuilder.Entity("BPMS_DAL.Entities.ServiceHeaderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("Headers");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.SolvingRoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SolvingRoles");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.SystemAgendaEntity", b =>
                {
                    b.Property<Guid>("AgendaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SystemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AgendaId", "SystemId");

                    b.HasIndex("SystemId");

                    b.ToTable("SystemAgendas");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.SystemEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Encryption")
                        .HasColumnType("int");

                    b.Property<int>("ForeignEncryption")
                        .HasColumnType("int");

                    b.Property<byte[]>("Key")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("URL")
                        .IsUnique();

                    b.ToTable("Systems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("26ea2c26-f4c9-43b0-8607-f7de1dad9fcd"),
                            Encryption = 2,
                            ForeignEncryption = 0,
                            Key = new byte[] { 50, 115, 53, 118, 56, 121, 47, 66, 63, 69, 40, 72, 43, 77, 98, 81, 101, 84, 104, 86, 109, 89, 113, 51, 116, 54, 119, 57, 122, 36, 67, 38 },
                            Name = "Tento systém",
                            State = 5,
                            URL = "https://localhost:5001/"
                        });
                });

            modelBuilder.Entity("BPMS_DAL.Entities.SystemRoleEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("UserId", "Role");

                    b.ToTable("SystemRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("5e250b64-ea22-4880-86d2-94d547b2e1b4"),
                            Role = 0
                        },
                        new
                        {
                            UserId = new Guid("5e250b64-ea22-4880-86d2-94d547b2e1b4"),
                            Role = 1
                        },
                        new
                        {
                            UserId = new Guid("5e250b64-ea22-4880-86d2-94d547b2e1b4"),
                            Role = 2
                        });
                });

            modelBuilder.Entity("BPMS_DAL.Entities.TaskDataEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AttributeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OutputTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SchemaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("OutputTaskId");

                    b.HasIndex("SchemaId");

                    b.ToTable("TaskDatas");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.TaskDataMapEntity", b =>
                {
                    b.Property<Guid>("TaskDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TaskDataId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskDataMaps");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5e250b64-ea22-4880-86d2-94d547b2e1b4"),
                            Email = "admin.system@test.cz",
                            Name = "Admin",
                            Password = "0D4Goyxhm3BVmcRZjILlAmmcYVXzA/r4F3EuTgPs9/IceLePOrWev0OuL3p5zMLN29kLXg8THR9DllAmtRugzG4P",
                            Surname = "System",
                            Title = "Ing.",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("BPMS_DAL.Entities.UserRoleEntity", b =>
                {
                    b.Property<Guid>("AgendaRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AgendaRoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.WorkflowEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdministratorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AgendaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdministratorId");

                    b.HasIndex("AgendaId");

                    b.HasIndex("ModelId");

                    b.ToTable("Workflows");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.BlockDataTypes.ArrayDataEntity", b =>
                {
                    b.HasBaseType("BPMS_DAL.Entities.TaskDataEntity");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.ToTable("ArrayTaskData", (string)null);
                });

            modelBuilder.Entity("BPMS_DAL.Entities.BlockDataTypes.BoolDataEntity", b =>
                {
                    b.HasBaseType("BPMS_DAL.Entities.TaskDataEntity");

                    b.Property<bool?>("Value")
                        .HasColumnType("bit");

                    b.ToTable("BoolTaskData", (string)null);
                });

            modelBuilder.Entity("BPMS_DAL.Entities.BlockDataTypes.DateDataEntity", b =>
                {
                    b.HasBaseType("BPMS_DAL.Entities.TaskDataEntity");

                    b.Property<DateTime?>("Value")
                        .HasColumnType("datetime2");

                    b.ToTable("DateTaskData", (string)null);
                });

            modelBuilder.Entity("BPMS_DAL.Entities.BlockDataTypes.FileDataEntity", b =>
                {
                    b.HasBaseType("BPMS_DAL.Entities.TaskDataEntity");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MIMEType")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("FileTaskData", (string)null);
                });

            modelBuilder.Entity("BPMS_DAL.Entities.BlockDataTypes.NumberDataEntity", b =>
                {
                    b.HasBaseType("BPMS_DAL.Entities.TaskDataEntity");

                    b.Property<double?>("Value")
                        .HasColumnType("float");

                    b.ToTable("NumberTaskData", (string)null);
                });

            modelBuilder.Entity("BPMS_DAL.Entities.BlockDataTypes.SelectDataEntity", b =>
                {
                    b.HasBaseType("BPMS_DAL.Entities.TaskDataEntity");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("SelectTaskData", (string)null);
                });

            modelBuilder.Entity("BPMS_DAL.Entities.BlockDataTypes.StringDataEntity", b =>
                {
                    b.HasBaseType("BPMS_DAL.Entities.TaskDataEntity");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("StringTaskData", (string)null);
                });

            modelBuilder.Entity("BPMS_DAL.Entities.BlockDataTypes.TextDataEntity", b =>
                {
                    b.HasBaseType("BPMS_DAL.Entities.TaskDataEntity");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("TextTaskData", (string)null);
                });

            modelBuilder.Entity("BPMS_DAL.Entities.ModelBlocks.EndEventModelEntity", b =>
                {
                    b.HasBaseType("BPMS_DAL.Entities.BlockModelEntity");

                    b.ToTable("EndEventsModel", (string)null);
                });

            modelBuilder.Entity("BPMS_DAL.Entities.ModelBlocks.ExclusiveGatewayModelEntity", b =>
                {
                    b.HasBaseType("BPMS_DAL.Entities.BlockModelEntity");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("ExclusiveGatewaysModel", (string)null);
                });

            modelBuilder.Entity("BPMS_DAL.Entities.ModelBlocks.ParallelGatewayModelEntity", b =>
                {
                    b.HasBaseType("BPMS_DAL.Entities.BlockModelEntity");

                    b.ToTable("ParallelGatewaysModel", (string)null);
                });

            modelBuilder.Entity("BPMS_DAL.Entities.ModelBlocks.RecieveEventModelEntity", b =>
                {
                    b.HasBaseType("BPMS_DAL.Entities.BlockModelEntity");

                    b.Property<bool>("Editable")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ForeignSenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("ForeignSenderId")
                        .IsUnique()
                        .HasFilter("[ForeignSenderId] IS NOT NULL");

                    b.HasIndex("SenderId");

                    b.ToTable("RecieveEventsModel", (string)null);
                });

            modelBuilder.Entity("BPMS_DAL.Entities.ModelBlocks.SendEventModelEntity", b =>
                {
                    b.HasBaseType("BPMS_DAL.Entities.BlockModelEntity");

                    b.ToTable("SendEventsModel", (string)null);
                });

            modelBuilder.Entity("BPMS_DAL.Entities.ModelBlocks.ServiceTaskModelEntity", b =>
                {
                    b.HasBaseType("BPMS_DAL.Entities.BlockModelEntity");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasIndex("RoleId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceTasksModel", (string)null);
                });

            modelBuilder.Entity("BPMS_DAL.Entities.ModelBlocks.StartEventModelEntity", b =>
                {
                    b.HasBaseType("BPMS_DAL.Entities.BlockModelEntity");

                    b.ToTable("StartEventsModel", (string)null);
                });

            modelBuilder.Entity("BPMS_DAL.Entities.ModelBlocks.UserTaskModelEntity", b =>
                {
                    b.HasBaseType("BPMS_DAL.Entities.BlockModelEntity");

                    b.Property<TimeSpan>("Difficulty")
                        .HasColumnType("time");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("RoleId");

                    b.ToTable("UserTasksModel", (string)null);
                });

            modelBuilder.Entity("BPMS_DAL.Entities.WorkflowBlocks.EndEventWorkflowEntity", b =>
                {
                    b.HasBaseType("BPMS_DAL.Entities.BlockWorkflowEntity");

                    b.ToTable("EndEventsWorkflow", (string)null);
                });

            modelBuilder.Entity("BPMS_DAL.Entities.WorkflowBlocks.RecieveEventWorkflowEntity", b =>
                {
                    b.HasBaseType("BPMS_DAL.Entities.BlockWorkflowEntity");

                    b.Property<bool>("Delivered")
                        .HasColumnType("bit");

                    b.ToTable("RecieveEventsWorkflow", (string)null);
                });

            modelBuilder.Entity("BPMS_DAL.Entities.WorkflowBlocks.SendEventWorkflowEntity", b =>
                {
                    b.HasBaseType("BPMS_DAL.Entities.BlockWorkflowEntity");

                    b.ToTable("SendEventsWorkflow", (string)null);
                });

            modelBuilder.Entity("BPMS_DAL.Entities.WorkflowBlocks.ServiceTaskWorkflowEntity", b =>
                {
                    b.HasBaseType("BPMS_DAL.Entities.BlockWorkflowEntity");

                    b.Property<string>("FailedResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("UserId");

                    b.ToTable("ServiceTasksWorkflow", (string)null);
                });

            modelBuilder.Entity("BPMS_DAL.Entities.WorkflowBlocks.StartEventWorkflowEntity", b =>
                {
                    b.HasBaseType("BPMS_DAL.Entities.BlockWorkflowEntity");

                    b.ToTable("StartEventsWorkflow", (string)null);
                });

            modelBuilder.Entity("BPMS_DAL.Entities.WorkflowBlocks.UserTaskWorkflowEntity", b =>
                {
                    b.HasBaseType("BPMS_DAL.Entities.BlockWorkflowEntity");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime>("SolveDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("UserId");

                    b.ToTable("UserTasksWorkflow", (string)null);
                });

            modelBuilder.Entity("BPMS_DAL.Entities.AgendaEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.UserEntity", "Administrator")
                        .WithMany("Agendas")
                        .HasForeignKey("AdministratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Administrator");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.AgendaRoleEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.AgendaEntity", "Agenda")
                        .WithMany("AgendaRoles")
                        .HasForeignKey("AgendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BPMS_DAL.Entities.SolvingRoleEntity", "Role")
                        .WithMany("AgendaRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agenda");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.AttributeEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.BlockModelEntity", "Block")
                        .WithMany("Attributes")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BPMS_DAL.Entities.ConditionDataEntity", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionExclusiveGatewayId", "ConditionDataSchemaId");

                    b.Navigation("Block");

                    b.Navigation("Condition");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.AttributeMapEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.AttributeEntity", "Attribute")
                        .WithMany("MappedBlocks")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("BPMS_DAL.Entities.BlockModelEntity", "Block")
                        .WithMany("MappedAttributes")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Block");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.AuditMessageEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.SystemEntity", "System")
                        .WithMany("AuditMessages")
                        .HasForeignKey("SystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("System");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.BlockModelDataSchemaEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.BlockModelEntity", "Block")
                        .WithMany("DataSchemas")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BPMS_DAL.Entities.DataSchemaEntity", "DataSchema")
                        .WithMany("Blocks")
                        .HasForeignKey("DataSchemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BPMS_DAL.Entities.ModelBlocks.ServiceTaskModelEntity", "ServiceTask")
                        .WithMany("Blocks")
                        .HasForeignKey("ServiceTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("DataSchema");

                    b.Navigation("ServiceTask");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.BlockModelEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.PoolEntity", "Pool")
                        .WithMany("Blocks")
                        .HasForeignKey("PoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pool");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.BlockWorkflowEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.BlockModelEntity", "BlockModel")
                        .WithMany("BlockWorkflows")
                        .HasForeignKey("BlockModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BPMS_DAL.Entities.WorkflowEntity", "Workflow")
                        .WithMany("Blocks")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BlockModel");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.ConditionDataEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.DataSchemaEntity", "DataSchema")
                        .WithMany("Conditions")
                        .HasForeignKey("DataSchemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BPMS_DAL.Entities.ModelBlocks.ExclusiveGatewayModelEntity", "ExclusiveGateway")
                        .WithMany("Conditions")
                        .HasForeignKey("ExclusiveGatewayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataSchema");

                    b.Navigation("ExclusiveGateway");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.ConnectionRequestEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.SystemEntity", "System")
                        .WithMany("ConnectionRequests")
                        .HasForeignKey("SystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("System");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.DataSchemaEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.DataSchemaEntity", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BPMS_DAL.Entities.ServiceEntity", "Service")
                        .WithMany("DataSchemas")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.DataSchemaMapEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.ModelBlocks.ServiceTaskModelEntity", "ServiceTask")
                        .WithMany("MappedSchemas")
                        .HasForeignKey("ServiceTaskId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS_DAL.Entities.DataSchemaEntity", "Source")
                        .WithMany("Sources")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS_DAL.Entities.DataSchemaEntity", "Target")
                        .WithMany("Targets")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ServiceTask");

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.FilterEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.UserEntity", "User")
                        .WithMany("Fitlers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.FlowEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.BlockModelEntity", "InBlock")
                        .WithMany("InFlows")
                        .HasForeignKey("InBlockId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("BPMS_DAL.Entities.BlockModelEntity", "OutBlock")
                        .WithMany("OutFlows")
                        .HasForeignKey("OutBlockId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("InBlock");

                    b.Navigation("OutBlock");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.ForeignAttributeMapEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.AttributeEntity", "Attribute")
                        .WithOne("MappedForeignBlock")
                        .HasForeignKey("BPMS_DAL.Entities.ForeignAttributeMapEntity", "AttributeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("BPMS_DAL.Entities.ForeignSendEventEntity", "ForeignSendEvent")
                        .WithMany("MappedAttributes")
                        .HasForeignKey("ForeignSendEventId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("ForeignSendEvent");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.ForeignRecieveEventEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.ModelBlocks.SendEventModelEntity", "Sender")
                        .WithMany("ForeignRecievers")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BPMS_DAL.Entities.SystemEntity", "System")
                        .WithMany("ForeignRecievers")
                        .HasForeignKey("SystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");

                    b.Navigation("System");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.ForeignSendEventEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.SystemEntity", "System")
                        .WithMany("ForeignSenedrs")
                        .HasForeignKey("SystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("System");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.ModelEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.AgendaEntity", "Agenda")
                        .WithMany("Models")
                        .HasForeignKey("AgendaId");

                    b.Navigation("Agenda");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.NotificationEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.UserEntity", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.PoolEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.ModelEntity", "Model")
                        .WithMany("Pools")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BPMS_DAL.Entities.SystemEntity", "System")
                        .WithMany("Pools")
                        .HasForeignKey("SystemId");

                    b.Navigation("Model");

                    b.Navigation("System");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.ServiceHeaderEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.ServiceEntity", "Service")
                        .WithMany("Headers")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.SystemAgendaEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.AgendaEntity", "Agenda")
                        .WithMany("Systems")
                        .HasForeignKey("AgendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BPMS_DAL.Entities.SystemEntity", "System")
                        .WithMany("Agendas")
                        .HasForeignKey("SystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agenda");

                    b.Navigation("System");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.SystemRoleEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.UserEntity", "User")
                        .WithMany("SystemRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.TaskDataEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.AttributeEntity", "Attribute")
                        .WithMany("Data")
                        .HasForeignKey("AttributeId");

                    b.HasOne("BPMS_DAL.Entities.BlockWorkflowEntity", "OutputTask")
                        .WithMany("OutputData")
                        .HasForeignKey("OutputTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BPMS_DAL.Entities.DataSchemaEntity", "Schema")
                        .WithMany("Data")
                        .HasForeignKey("SchemaId");

                    b.Navigation("Attribute");

                    b.Navigation("OutputTask");

                    b.Navigation("Schema");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.TaskDataMapEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.TaskDataEntity", "TaskData")
                        .WithMany("InputData")
                        .HasForeignKey("TaskDataId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BPMS_DAL.Entities.BlockWorkflowEntity", "Task")
                        .WithMany("InputData")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("TaskData");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.UserRoleEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.AgendaRoleEntity", "AgendaRole")
                        .WithMany("UserRoles")
                        .HasForeignKey("AgendaRoleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("BPMS_DAL.Entities.UserEntity", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AgendaRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.WorkflowEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.UserEntity", "Administrator")
                        .WithMany("Workflows")
                        .HasForeignKey("AdministratorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BPMS_DAL.Entities.AgendaEntity", "Agenda")
                        .WithMany("Workflows")
                        .HasForeignKey("AgendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BPMS_DAL.Entities.ModelEntity", "Model")
                        .WithMany("Workflows")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Administrator");

                    b.Navigation("Agenda");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.BlockDataTypes.ArrayDataEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.TaskDataEntity", null)
                        .WithOne()
                        .HasForeignKey("BPMS_DAL.Entities.BlockDataTypes.ArrayDataEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BPMS_DAL.Entities.BlockDataTypes.BoolDataEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.TaskDataEntity", null)
                        .WithOne()
                        .HasForeignKey("BPMS_DAL.Entities.BlockDataTypes.BoolDataEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BPMS_DAL.Entities.BlockDataTypes.DateDataEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.TaskDataEntity", null)
                        .WithOne()
                        .HasForeignKey("BPMS_DAL.Entities.BlockDataTypes.DateDataEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BPMS_DAL.Entities.BlockDataTypes.FileDataEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.TaskDataEntity", null)
                        .WithOne()
                        .HasForeignKey("BPMS_DAL.Entities.BlockDataTypes.FileDataEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BPMS_DAL.Entities.BlockDataTypes.NumberDataEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.TaskDataEntity", null)
                        .WithOne()
                        .HasForeignKey("BPMS_DAL.Entities.BlockDataTypes.NumberDataEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BPMS_DAL.Entities.BlockDataTypes.SelectDataEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.TaskDataEntity", null)
                        .WithOne()
                        .HasForeignKey("BPMS_DAL.Entities.BlockDataTypes.SelectDataEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BPMS_DAL.Entities.BlockDataTypes.StringDataEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.TaskDataEntity", null)
                        .WithOne()
                        .HasForeignKey("BPMS_DAL.Entities.BlockDataTypes.StringDataEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BPMS_DAL.Entities.BlockDataTypes.TextDataEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.TaskDataEntity", null)
                        .WithOne()
                        .HasForeignKey("BPMS_DAL.Entities.BlockDataTypes.TextDataEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BPMS_DAL.Entities.ModelBlocks.EndEventModelEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.BlockModelEntity", null)
                        .WithOne()
                        .HasForeignKey("BPMS_DAL.Entities.ModelBlocks.EndEventModelEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BPMS_DAL.Entities.ModelBlocks.ExclusiveGatewayModelEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.BlockModelEntity", null)
                        .WithOne()
                        .HasForeignKey("BPMS_DAL.Entities.ModelBlocks.ExclusiveGatewayModelEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BPMS_DAL.Entities.ModelBlocks.ParallelGatewayModelEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.BlockModelEntity", null)
                        .WithOne()
                        .HasForeignKey("BPMS_DAL.Entities.ModelBlocks.ParallelGatewayModelEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BPMS_DAL.Entities.ModelBlocks.RecieveEventModelEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.ForeignSendEventEntity", "ForeignSender")
                        .WithOne("Reciever")
                        .HasForeignKey("BPMS_DAL.Entities.ModelBlocks.RecieveEventModelEntity", "ForeignSenderId");

                    b.HasOne("BPMS_DAL.Entities.BlockModelEntity", null)
                        .WithOne()
                        .HasForeignKey("BPMS_DAL.Entities.ModelBlocks.RecieveEventModelEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("BPMS_DAL.Entities.ModelBlocks.SendEventModelEntity", "Sender")
                        .WithMany("Recievers")
                        .HasForeignKey("SenderId");

                    b.Navigation("ForeignSender");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.ModelBlocks.SendEventModelEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.BlockModelEntity", null)
                        .WithOne()
                        .HasForeignKey("BPMS_DAL.Entities.ModelBlocks.SendEventModelEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BPMS_DAL.Entities.ModelBlocks.ServiceTaskModelEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.BlockModelEntity", null)
                        .WithOne()
                        .HasForeignKey("BPMS_DAL.Entities.ModelBlocks.ServiceTaskModelEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("BPMS_DAL.Entities.SolvingRoleEntity", "Role")
                        .WithMany("ServiceTask")
                        .HasForeignKey("RoleId");

                    b.HasOne("BPMS_DAL.Entities.ServiceEntity", "Service")
                        .WithMany("ServiceTasks")
                        .HasForeignKey("ServiceId");

                    b.Navigation("Role");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.ModelBlocks.StartEventModelEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.BlockModelEntity", null)
                        .WithOne()
                        .HasForeignKey("BPMS_DAL.Entities.ModelBlocks.StartEventModelEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BPMS_DAL.Entities.ModelBlocks.UserTaskModelEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.BlockModelEntity", null)
                        .WithOne()
                        .HasForeignKey("BPMS_DAL.Entities.ModelBlocks.UserTaskModelEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("BPMS_DAL.Entities.SolvingRoleEntity", "Role")
                        .WithMany("UserTasks")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.WorkflowBlocks.EndEventWorkflowEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.BlockWorkflowEntity", null)
                        .WithOne()
                        .HasForeignKey("BPMS_DAL.Entities.WorkflowBlocks.EndEventWorkflowEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BPMS_DAL.Entities.WorkflowBlocks.RecieveEventWorkflowEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.BlockWorkflowEntity", null)
                        .WithOne()
                        .HasForeignKey("BPMS_DAL.Entities.WorkflowBlocks.RecieveEventWorkflowEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BPMS_DAL.Entities.WorkflowBlocks.SendEventWorkflowEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.BlockWorkflowEntity", null)
                        .WithOne()
                        .HasForeignKey("BPMS_DAL.Entities.WorkflowBlocks.SendEventWorkflowEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BPMS_DAL.Entities.WorkflowBlocks.ServiceTaskWorkflowEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.BlockWorkflowEntity", null)
                        .WithOne()
                        .HasForeignKey("BPMS_DAL.Entities.WorkflowBlocks.ServiceTaskWorkflowEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("BPMS_DAL.Entities.UserEntity", "User")
                        .WithMany("Services")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.WorkflowBlocks.StartEventWorkflowEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.BlockWorkflowEntity", null)
                        .WithOne()
                        .HasForeignKey("BPMS_DAL.Entities.WorkflowBlocks.StartEventWorkflowEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BPMS_DAL.Entities.WorkflowBlocks.UserTaskWorkflowEntity", b =>
                {
                    b.HasOne("BPMS_DAL.Entities.BlockWorkflowEntity", null)
                        .WithOne()
                        .HasForeignKey("BPMS_DAL.Entities.WorkflowBlocks.UserTaskWorkflowEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("BPMS_DAL.Entities.UserEntity", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.AgendaEntity", b =>
                {
                    b.Navigation("AgendaRoles");

                    b.Navigation("Models");

                    b.Navigation("Systems");

                    b.Navigation("Workflows");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.AgendaRoleEntity", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.AttributeEntity", b =>
                {
                    b.Navigation("Data");

                    b.Navigation("MappedBlocks");

                    b.Navigation("MappedForeignBlock");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.BlockModelEntity", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("BlockWorkflows");

                    b.Navigation("DataSchemas");

                    b.Navigation("InFlows");

                    b.Navigation("MappedAttributes");

                    b.Navigation("OutFlows");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.BlockWorkflowEntity", b =>
                {
                    b.Navigation("InputData");

                    b.Navigation("OutputData");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.DataSchemaEntity", b =>
                {
                    b.Navigation("Blocks");

                    b.Navigation("Children");

                    b.Navigation("Conditions");

                    b.Navigation("Data");

                    b.Navigation("Sources");

                    b.Navigation("Targets");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.ForeignSendEventEntity", b =>
                {
                    b.Navigation("MappedAttributes");

                    b.Navigation("Reciever");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.ModelEntity", b =>
                {
                    b.Navigation("Pools");

                    b.Navigation("Workflows");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.PoolEntity", b =>
                {
                    b.Navigation("Blocks");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.ServiceEntity", b =>
                {
                    b.Navigation("DataSchemas");

                    b.Navigation("Headers");

                    b.Navigation("ServiceTasks");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.SolvingRoleEntity", b =>
                {
                    b.Navigation("AgendaRoles");

                    b.Navigation("ServiceTask");

                    b.Navigation("UserTasks");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.SystemEntity", b =>
                {
                    b.Navigation("Agendas");

                    b.Navigation("AuditMessages");

                    b.Navigation("ConnectionRequests");

                    b.Navigation("ForeignRecievers");

                    b.Navigation("ForeignSenedrs");

                    b.Navigation("Pools");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.TaskDataEntity", b =>
                {
                    b.Navigation("InputData");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.UserEntity", b =>
                {
                    b.Navigation("Agendas");

                    b.Navigation("Fitlers");

                    b.Navigation("Notifications");

                    b.Navigation("Services");

                    b.Navigation("SystemRoles");

                    b.Navigation("Tasks");

                    b.Navigation("UserRoles");

                    b.Navigation("Workflows");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.WorkflowEntity", b =>
                {
                    b.Navigation("Blocks");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.ModelBlocks.ExclusiveGatewayModelEntity", b =>
                {
                    b.Navigation("Conditions");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.ModelBlocks.SendEventModelEntity", b =>
                {
                    b.Navigation("ForeignRecievers");

                    b.Navigation("Recievers");
                });

            modelBuilder.Entity("BPMS_DAL.Entities.ModelBlocks.ServiceTaskModelEntity", b =>
                {
                    b.Navigation("Blocks");

                    b.Navigation("MappedSchemas");
                });
#pragma warning restore 612, 618
        }
    }
}
